#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Created on Wed Jun  7 14:27:53 2023

Authors: jasonsahl, grantpemberton
"""

from __future__ import division
import sys
from optparse import OptionParser
import os
import collections
import time
import csv

try:
    from Bio import SeqIO
except ImportError:
    print("Biopython is not installed but needs to be...exiting")
    sys.exit()

# logPrint stuff
OUTSTREAM = sys.stdout
ERRSTREAM = sys.stderr
DEBUG = False

def logPrint(msg, stream=None):
    if stream is None:
        stream = OUTSTREAM
    stream.write('LOG: %s - %s\n' % (timestamp(), removeRecursiveMsg(msg)))
    stream.flush()

def errorPrint(msg, stream=None):
    if stream is None:
        stream = ERRSTREAM
    stream.write('ERROR: %s - %s\n' % (timestamp(), removeRecursiveMsg(msg)))
    stream.flush()

def debugPrint(fmsg, stream=None):
    if DEBUG:
        if stream is None:
            stream = ERRSTREAM
        stream.write('DEBUG: %s - %s\n' % (timestamp(), removeRecursiveMsg(fmsg())))
        stream.flush()

def timestamp():
    return time.strftime('%Y/%m/%d %H:%M:%S')

def removeRecursiveMsg(msg):
    if msg.startswith('ERROR: ') or msg.startswith('DEBUG: ') or msg.startswith('LOG: '):
        return msg.split(' - ', 1)[1]
    else:
        return msg

def test_file(option, opt_str, value, parser):
    try:
        with open(value): setattr(parser.values, option.dest, value)
    except IOError:
        print('%s cannot be opened' % option)
        sys.exit()

def parse_fasta_by_coverage(in_fasta, min_cov):
    passing_records = []
    failed_records = []
    with open(in_fasta) as my_fasta:
        for record in SeqIO.parse(my_fasta, "fasta"):
            header_fields = record.id.split("_")
            if len(header_fields) == 0:
                errorPrint("Invalid header format: %s" % record.id)
            elif header_fields[-1] == "":
                errorPrint("Empty coverage value in header: %s" % record.id)
            elif header_fields[-1].isdigit() and int(header_fields[-1]) < min_cov:
                failed_records.append(record.id)
            elif "CONSENSUS" not in record.id:
                passing_records.append(record.id)
    if len(failed_records) > 0:
        logPrint("%s records were below %sX and will be filtered" % (len(failed_records), str(min_cov)))
    return passing_records

def parse_zygosity(in_fasta, passing_records, proportion):
    passing = []
    sample_dict = {}

    with open(in_fasta) as my_fasta:
        for record in SeqIO.parse(my_fasta, "fasta"):
            header_fields = record.id.split("_")
            if record.id in passing_records:
                try:
                    sample_dict["_".join(header_fields[0:-1])].append(int(header_fields[-1]))
                except KeyError:
                    sample_dict["_".join(header_fields[0:-1])] = [int(header_fields[-1])]

    for k, v in sample_dict.items():
        values = sorted(v, reverse=True)
        if len(values) == 1:
            for value in values:
                passing.append(k + "_" + str(value))
        else:
            top_value = values[0]
            for value in values:
                if float(value / top_value) >= proportion:
                    passing.append(f"{k}_{value}")

    diffs = set(passing_records).difference(set(passing))
    if len(diffs) > 0:
        logPrint("%s samples failed the proportion filter and will be removed" % len(diffs))

    return passing


def get_sequence_from_id(record_id, fasta_file):
    with open(fasta_file) as my_fasta:
        for record in SeqIO.parse(my_fasta, "fasta"):
            if record.id == record_id:
                return str(record.seq)
    return None

def get_alleles(passing_records, fasta_file):
    sequences = []
    for record_id in passing_records:
        sequence = get_sequence_from_id(record_id, fasta_file)
        sequences.append(sequence)
    frequency = collections.Counter(sequences)
    sorted_frequency = sorted(frequency.items(), key=lambda x: x[1], reverse=True)
    return sorted_frequency

def assign_alleles(fasta, allele_file, allele_list, passing_records):
    previous_alleles = {}
    next_allele_number = 1

    # Load previous alleles if provided
    if allele_file != "NULL":
        previous_alleles = load_previous_alleles(allele_file)
        # Find the highest allele number in the previous alleles file
        existing_numbers = [int(value[1:]) for value in previous_alleles.values()]
        if existing_numbers:
            next_allele_number = max(existing_numbers) + 1

    allele_count_dict = {}
    sequence_to_allele = {}

    # Assign alleles to sequences based on previous allele file or as new alleles
    for sequence, _ in allele_list:
        if sequence in previous_alleles:
            # Use the previous allele number if the sequence was seen before
            allele_count_dict[sequence] = previous_alleles[sequence]
        else:
            # Assign new allele number if the sequence is new
            if sequence not in sequence_to_allele:
                allele_count_dict[sequence] = f"A{next_allele_number}"
                sequence_to_allele[sequence] = f"A{next_allele_number}"
                next_allele_number += 1

    file_name = os.path.basename(fasta).strip(".fasta")

    # Write to the _alleles.tsv file
    with open(f"{file_name}_alleles.tsv", "w") as alleles_out:
        for sequence, _ in allele_list:
            alleles_out.write(f"{sequence}\t{allele_count_dict[sequence]}\n")

    # Write to the genotyped FASTA file
    with open(fasta) as my_fasta:
        with open(f"{file_name}.genotyped.fasta", "w") as genotype_out:
            for record in SeqIO.parse(my_fasta, "fasta"):
                if record.id in passing_records:
                    name_fields = record.id.split("_")
                    sequence = str(record.seq)
                    if sequence in allele_count_dict:
                        allele_number = allele_count_dict[sequence]
                    else:
                        allele_number = f"A{next_allele_number}"
                        allele_count_dict[sequence] = allele_number
                        next_allele_number += 1
                    new_header = "_".join(name_fields[0:-1]) + "_" + name_fields[2] + f"_{allele_number}"
                    genotype_out.write(f">{new_header}\n{sequence}\n")


        if "NULL" not in allele_file:
            with open(f"{file_name}_alleles.tsv", "w") as newout:
                for sequence, count in allele_list:
                    newout.write(f"{sequence}\t{count}\n")


def create_excel_compatible_output(fasta_file, passing_records, allele_list):
    file_name = fasta_file.replace(".fasta", "_genotype_table.tsv")
    
    # Assign allele names (A1, A2, ...)
    allele_ranking = {sequence: f"A{idx + 1}" for idx, (sequence, _) in enumerate(allele_list)}
    
    sequence_data = {}

    with open(fasta_file) as my_fasta:
        for record in SeqIO.parse(my_fasta, "fasta"):
            if record.id in passing_records:
                sequence = str(record.seq)

                # Parse name and read count safely
                parts = record.id.rsplit("_", 1)
                if len(parts) == 2 and parts[1].isdigit():
                    name, read_count = parts[0], int(parts[1])
                else:
                    name = record.id
                    read_count = 0

                allele = allele_ranking[sequence]

                if name not in sequence_data:
                    sequence_data[name] = []
                sequence_data[name].append((read_count, allele))

    max_alleles = max(len(v) for v in sequence_data.values())

    # Build dynamic header
    header = ["Name of the sequence"]
    for i in range(1, max_alleles + 1):
        header.extend([f"Read count {i}", f"Assigned allele {i}"])

    # Write the output file
    with open(file_name, "w", newline='') as outfile:
        writer = csv.writer(outfile, delimiter='\t')
        writer.writerow(header)
        for name, allele_data in sequence_data.items():
            sorted_alleles = sorted(allele_data, key=lambda x: x[0], reverse=True)
            row = [name]
            for read_count, allele in sorted_alleles:
                row.extend([read_count, allele])
            while len(row) < len(header):
                row.extend(["", ""])
            writer.writerow(row)

def main(fasta_file, min_cov, proportion, alleles):
    passing_records = parse_fasta_by_coverage(fasta_file, min_cov)
    passing_records2 = parse_zygosity(fasta_file, passing_records, proportion)
    allele_list = get_alleles(passing_records2, fasta_file)

    assign_alleles(fasta_file, alleles, allele_list, passing_records2)
    create_excel_compatible_output(fasta_file, passing_records2, allele_list)

    file_name = fasta_file.replace(".fasta", "_frequency.tsv")
    with open(file_name, "w") as freq_out:
        for sequence, count in allele_list:
            freq_out.write(f"{sequence}\t{count}\n")

if __name__ == "__main__":
    parser = OptionParser(usage="usage: %prog [options]", version="%prog 0.0.3")
    parser.add_option("-f", "--fasta", dest="fasta",
                      help="input FASTA file to filter [REQUIRED]",
                      type="string", action="callback", callback=test_file)
    parser.add_option("-c", "--min_cov", dest="min_cov",
                      help="filter under minimum coverage; defaults to 10",
                      type="int", action="store", default=10)
    parser.add_option("-p", "--proportion", dest="proportion",
                      help="reads under this proportion will be filtered; defaults to 0.5",
                      type="float", action="store", default=0.5)
    parser.add_option("-a", "--alleles", dest="alleles",
                      help="TSV file of sequence'\t'previous_allele_number",
                      type="string", action="store", default="NULL")
    options, args = parser.parse_args()
    mandatories = ["fasta"]
    for m in mandatories:
        if not getattr(options, m, None):
            print("\nMust provide %s.\n" % m)
            parser.print_help()
            exit(-1)
    main(options.fasta, options.min_cov, options.proportion, options.alleles)
